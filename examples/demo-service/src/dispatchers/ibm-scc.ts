/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as log4js from 'log4js';
import * as FindingsAPI from 'ibm-security-advisor/findings-api/v1';
import {IamAuthenticator} from 'ibm-security-advisor/auth';
import {CsnfEvent} from 'onug-csnf';
import {BaseDispatcher, Dispatchers} from "./base-dispatcher";
import {v4 as uuid} from 'uuid';

const logger = log4js.getLogger('ibm-scc-dispatcher');
logger.level = process.env.LOG_LEVEL || 'info';

const SI_ROOT_URL = 'https://us-south.secadvisor.cloud.ibm.com/findings';

export default class IbmSccDispatcher extends BaseDispatcher {
    private findingsApiClient;
    private sccAccountId;

    constructor() {
        super(Dispatchers.IBM_SCC);
        logger.trace('> constructor')
        const iamAuth = new IamAuthenticator({apikey: process.env.IBM_SCC_API_KEY});
        this.findingsApiClient = new FindingsAPI({
            authenticator: iamAuth,
            serviceUrl: SI_ROOT_URL
        });
        this.sccAccountId = process.env.IBM_SCC_ACCOUNT_ID;

        logger.trace('< constructor')
    }

    async dispatch(originalEvent: any, csnfEvent: CsnfEvent, csnfDecoration: any) {
        logger.trace('> dispatch');


        if (!csnfEvent.metadata.guid || csnfEvent.metadata.guid === 'n/a') {
            csnfEvent.metadata.guid = 'autogenerated-' + uuid();
        }

        const providerId = this.getProviderId(csnfEvent);
        const noteId = this.getNoteId(csnfEvent);

        const sccOccurrenceDoc = {
            accountId: this.sccAccountId,
            providerId: providerId,
            noteName: `${this.sccAccountId}/providers/${providerId}/notes/${noteId}`,
            kind: 'FINDING',
            id: new String(csnfEvent.metadata.guid),
            context: {
                region: csnfEvent.resources[0].region || 'n/a',
                environment_name: csnfEvent.resources[0].platform || 'n/a',
                service_name: csnfEvent.resources[0].service || 'n/a',
                resource_id: csnfEvent.resources[0].guid || 'n/a',
                resource_name: csnfEvent.resources[0].name || 'n/a',
                resource_type: csnfEvent.resources[0].type || 'n/a',
            },
            finding: {
                severity: csnfEvent.metadata.severity.toUpperCase(),
                certainty: 'MEDIUM',
                next_steps: [
                    {
                        title: 'Check the event in the security monitoring system',
                        url: csnfEvent.metadata.url || 'n/a'
                    }
                ]
            }
        };

        // console.log(JSON.stringify(sccOccurrenceDoc, null, 2));
        // return;

        try {
            const result = await this.findingsApiClient.createOccurrence(sccOccurrenceDoc);
            if (result.status === 200 || result.status === 201) {
                logger.debug('occurrence successfully dispatched');
            } else {
                logger.error('failed to dispatch occurrence', result);
            }
        } catch (e) {
            logger.error('failed to dispatch occurrence', e);
        }

        logger.trace('< dispatch');
    }

    getProviderId(csnfEvent: CsnfEvent){
        if (csnfEvent.reporter.name.includes('Sysdig')) return 'sysdig-secure';
        if (csnfEvent.reporter.name.includes('Aqua')) return 'aquasec';
        if (csnfEvent.reporter.name.includes('Azure Defender')) return 'azure-defender';
        if (csnfEvent.reporter.name.includes('Oracle Cloud Guard')) return 'oracle-cloud-guard';
        return null;
    }

    getNoteId(csnfEvent: CsnfEvent){
        if (csnfEvent.metadata.name.includes('Suspicious Container Activity')) return 'suspicious-container-activity';
        if (csnfEvent.metadata.name.includes('Block Container Exec')) return 'block-container-exec';
        if (csnfEvent.metadata.name.includes('Digital currency mining container detected')) return 'digital-currency-mining-activity';
        if (csnfEvent.metadata.name.includes('IAM group has too few members')) return 'network-security-group-deleted';
        return null;
    }
}


